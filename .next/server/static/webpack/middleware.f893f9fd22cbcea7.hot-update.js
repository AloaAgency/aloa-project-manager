"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middleware.js":
/*!***********************!*\
  !*** ./middleware.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid */ \"(middleware)/./node_modules/nanoid/index.browser.js\");\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/ssr */ \"(middleware)/./node_modules/@supabase/ssr/dist/module/index.js\");\n\n\n\n// Rate limiting implementation\nconst requestCounts = new Map();\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\nconst RATE_LIMITS = {\n    \"/api/responses\": {\n        max: 10,\n        window: RATE_LIMIT_WINDOW\n    },\n    \"/api/forms/upload\": {\n        max: 5,\n        window: RATE_LIMIT_WINDOW\n    },\n    \"/api/ai-analysis\": {\n        max: 5,\n        window: RATE_LIMIT_WINDOW\n    },\n    default: {\n        max: 100,\n        window: RATE_LIMIT_WINDOW\n    } // 100 requests per minute for other endpoints\n};\nfunction getRateLimit(pathname) {\n    for (const [path, limit] of Object.entries(RATE_LIMITS)){\n        if (pathname.startsWith(path)) {\n            return limit;\n        }\n    }\n    return RATE_LIMITS.default;\n}\nfunction checkRateLimit(ip, pathname) {\n    const key = `${ip}:${pathname}`;\n    const limit = getRateLimit(pathname);\n    const now = Date.now();\n    if (!requestCounts.has(key)) {\n        requestCounts.set(key, {\n            count: 1,\n            resetTime: now + limit.window\n        });\n        return true;\n    }\n    const record = requestCounts.get(key);\n    if (now > record.resetTime) {\n        record.count = 1;\n        record.resetTime = now + limit.window;\n        return true;\n    }\n    if (record.count >= limit.max) {\n        return false;\n    }\n    record.count++;\n    return true;\n}\n// Note: In production, use a proper cache like Redis for rate limiting\n// The Map will be cleared on server restart\nasync function middleware(request) {\n    let response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next({\n        request: {\n            headers: request.headers\n        }\n    });\n    const { pathname } = request.nextUrl;\n    // Authentication check for protected routes\n    const supabaseUrl = \"https://eycgzjqwowrdmjlzqqyg.supabase.co\";\n    const supabaseKey = \"sb_publishable_eG0lH_ACpyOjqG44mN_5PA_1-oFLr5n\" || 0;\n    if (supabaseUrl && supabaseKey) {\n        const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_1__.createServerClient)(supabaseUrl, supabaseKey, {\n            cookies: {\n                get (name) {\n                    return request.cookies.get(name)?.value;\n                },\n                set (name, value, options) {\n                    request.cookies.set({\n                        name,\n                        value,\n                        ...options\n                    });\n                    response.cookies.set({\n                        name,\n                        value,\n                        ...options\n                    });\n                },\n                remove (name, options) {\n                    request.cookies.set({\n                        name,\n                        value: \"\",\n                        ...options\n                    });\n                    response.cookies.set({\n                        name,\n                        value: \"\",\n                        ...options\n                    });\n                }\n            }\n        });\n        // Refresh session if expired\n        const { data: { user } } = await supabase.auth.getUser();\n        // Protected routes that require authentication\n        const protectedPaths = [\n            \"/dashboard\",\n            \"/create\",\n            \"/edit\",\n            \"/responses\",\n            \"/ai-analysis\",\n            \"/admin\",\n            \"/profile\",\n            \"/settings\"\n        ];\n        const isProtectedPath = protectedPaths.some((path)=>pathname.startsWith(path));\n        // Auth routes that should redirect if already logged in\n        const authPaths = [\n            \"/auth/login\",\n            \"/auth/signup\"\n        ];\n        const isAuthPath = authPaths.some((path)=>pathname.startsWith(path));\n        // If accessing protected route without authentication, redirect to login\n        if (isProtectedPath && !user) {\n            const redirectUrl = new URL(\"/auth/login\", request.url);\n            redirectUrl.searchParams.set(\"redirect\", pathname);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(redirectUrl);\n        }\n        // If accessing auth routes while authenticated, redirect to dashboard\n        if (isAuthPath && user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/dashboard\", request.url));\n        }\n        // For the root path, redirect based on auth status\n        if (pathname === \"/\") {\n            if (user) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/dashboard\", request.url));\n            } else {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/auth/login\", request.url));\n            }\n        }\n    }\n    // Get client IP (works with Vercel)\n    const ip = request.headers.get(\"x-forwarded-for\")?.split(\",\")[0] || request.headers.get(\"x-real-ip\") || request.ip || \"unknown\";\n    // Apply rate limiting to API routes\n    if (pathname.startsWith(\"/api/\")) {\n        if (!checkRateLimit(ip, pathname)) {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify({\n                error: \"Too many requests. Please try again later.\",\n                retryAfter: 60\n            }), {\n                status: 429,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Retry-After\": \"60\",\n                    \"X-RateLimit-Limit\": String(getRateLimit(pathname).max),\n                    \"X-RateLimit-Remaining\": \"0\",\n                    \"X-RateLimit-Reset\": String(Date.now() + RATE_LIMIT_WINDOW)\n                }\n            });\n        }\n    }\n    // Generate and attach CSRF token for state-changing operations\n    const csrfToken = request.cookies.get(\"csrf-token\")?.value || (0,nanoid__WEBPACK_IMPORTED_MODULE_2__.nanoid)();\n    // Set security headers\n    response.headers.set(\"X-Content-Type-Options\", \"nosniff\");\n    response.headers.set(\"X-Frame-Options\", \"DENY\");\n    response.headers.set(\"X-XSS-Protection\", \"1; mode=block\");\n    response.headers.set(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n    response.headers.set(\"Permissions-Policy\", \"camera=(), microphone=(), geolocation=()\");\n    // Content Security Policy\n    const cspDirectives = [\n        \"default-src 'self'\",\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live\",\n        \"style-src 'self' 'unsafe-inline'\",\n        \"img-src 'self' data: https: blob:\",\n        \"font-src 'self' data:\",\n        \"connect-src 'self' https://*.supabase.co https://vercel.live wss://ws-us3.pusher.com\",\n        \"frame-src 'self' https://vercel.live\",\n        \"form-action 'self'\",\n        \"base-uri 'self'\",\n        \"object-src 'none'\",\n        \"frame-ancestors 'none'\"\n    ];\n    response.headers.set(\"Content-Security-Policy\", cspDirectives.join(\"; \"));\n    // Always set CSRF token cookie if it doesn't exist\n    if (!request.cookies.get(\"csrf-token\")) {\n        response.cookies.set({\n            name: \"csrf-token\",\n            value: csrfToken,\n            httpOnly: false,\n            secure: \"development\" === \"production\",\n            sameSite: \"strict\",\n            path: \"/\",\n            maxAge: 60 * 60 * 24 // 24 hours\n        });\n    }\n    // CORS configuration for API routes\n    if (pathname.startsWith(\"/api/\")) {\n        const origin = request.headers.get(\"origin\");\n        const allowedOrigins = [\n            \"https://custom-forms-xi.vercel.app\",\n            \"http://localhost:3000\",\n            \"http://localhost:3001\"\n        ];\n        if (origin && allowedOrigins.includes(origin)) {\n            response.headers.set(\"Access-Control-Allow-Origin\", origin);\n            response.headers.set(\"Access-Control-Allow-Credentials\", \"true\");\n            response.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n            response.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, X-CSRF-Token\");\n            response.headers.set(\"Access-Control-Max-Age\", \"86400\");\n        }\n        // Handle preflight requests\n        if (request.method === \"OPTIONS\") {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n                status: 200,\n                headers: response.headers\n            });\n        }\n    }\n    return response;\n}\nconst config = {\n    matcher: [\n        \"/((?!_next/static|_next/image|favicon.ico).*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./middleware.js\n");

/***/ })

});