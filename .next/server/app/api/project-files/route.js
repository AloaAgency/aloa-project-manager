"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/project-files/route";
exports.ids = ["app/api/project-files/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproject-files%2Froute&page=%2Fapi%2Fproject-files%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproject-files%2Froute.js&appDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproject-files%2Froute&page=%2Fapi%2Fproject-files%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproject-files%2Froute.js&appDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_rosspalmer_Ross_GitHub_Projects_aloa_web_design_project_manager_app_api_project_files_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/project-files/route.js */ \"(rsc)/./app/api/project-files/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/project-files/route\",\n        pathname: \"/api/project-files\",\n        filename: \"route\",\n        bundlePath: \"app/api/project-files/route\"\n    },\n    resolvedPagePath: \"/Users/rosspalmer/Ross GitHub Projects/aloa-web-design-project-manager/app/api/project-files/route.js\",\n    nextConfigOutput,\n    userland: _Users_rosspalmer_Ross_GitHub_Projects_aloa_web_design_project_manager_app_api_project_files_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/project-files/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9qZWN0LWZpbGVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwcm9qZWN0LWZpbGVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcHJvamVjdC1maWxlcyUyRnJvdXRlLmpzJmFwcERpcj0lMkZVc2VycyUyRnJvc3NwYWxtZXIlMkZSb3NzJTIwR2l0SHViJTIwUHJvamVjdHMlMkZhbG9hLXdlYi1kZXNpZ24tcHJvamVjdC1tYW5hZ2VyJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnJvc3NwYWxtZXIlMkZSb3NzJTIwR2l0SHViJTIwUHJvamVjdHMlMkZhbG9hLXdlYi1kZXNpZ24tcHJvamVjdC1tYW5hZ2VyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNxRDtBQUNsSTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fsb2EtcHJvamVjdC1tYW5hZ2VyLz9jNjM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yb3NzcGFsbWVyL1Jvc3MgR2l0SHViIFByb2plY3RzL2Fsb2Etd2ViLWRlc2lnbi1wcm9qZWN0LW1hbmFnZXIvYXBwL2FwaS9wcm9qZWN0LWZpbGVzL3JvdXRlLmpzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm9qZWN0LWZpbGVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcHJvamVjdC1maWxlc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvamVjdC1maWxlcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9yb3NzcGFsbWVyL1Jvc3MgR2l0SHViIFByb2plY3RzL2Fsb2Etd2ViLWRlc2lnbi1wcm9qZWN0LW1hbmFnZXIvYXBwL2FwaS9wcm9qZWN0LWZpbGVzL3JvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wcm9qZWN0LWZpbGVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproject-files%2Froute&page=%2Fapi%2Fproject-files%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproject-files%2Froute.js&appDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/project-files/route.js":
/*!****************************************!*\
  !*** ./app/api/project-files/route.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\n\n// Initialize Supabase service client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(\"https://eycgzjqwowrdmjlzqqyg.supabase.co\", process.env.SUPABASE_SECRET_KEY // Using service key to bypass RLS\n);\n// POST - Create new project file record, upload file, or create folder\nasync function POST(request) {\n    try {\n        const contentType = request.headers.get(\"content-type\");\n        // Handle folder creation with JSON\n        if (contentType?.includes(\"application/json\")) {\n            const { project_id, file_name, is_folder, parent_folder_id, uploaded_by } = await request.json();\n            if (!project_id || !file_name) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Project ID and name are required\"\n                }, {\n                    status: 400\n                });\n            }\n            if (is_folder) {\n                // Create folder record\n                const { data: folderRecord, error: folderError } = await supabase.from(\"aloa_project_files\").insert([\n                    {\n                        project_id,\n                        file_name,\n                        is_folder: true,\n                        parent_folder_id: parent_folder_id || null,\n                        uploaded_by: uploaded_by || \"admin\",\n                        folder_path: \"/\",\n                        is_visible: true\n                    }\n                ]).select().single();\n                if (folderError) {\n                    console.error(\"Error creating folder:\", folderError);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Failed to create folder\"\n                    }, {\n                        status: 500\n                    });\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    folder: folderRecord\n                });\n            }\n            // Handle regular file creation (legacy JSON path)\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Use FormData for file uploads\"\n            }, {\n                status: 400\n            });\n        }\n        // Handle file upload with FormData\n        if (contentType?.includes(\"multipart/form-data\")) {\n            const formData = await request.formData();\n            const file = formData.get(\"file\");\n            const projectId = formData.get(\"project_id\") || formData.get(\"projectId\");\n            const parentFolderId = formData.get(\"parent_folder_id\");\n            const category = formData.get(\"category\") || \"general\";\n            const description = formData.get(\"description\") || \"\";\n            const tags = formData.get(\"tags\") ? JSON.parse(formData.get(\"tags\")) : [];\n            if (!file || !projectId) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"File and projectId are required\"\n                }, {\n                    status: 400\n                });\n            }\n            // Get user from cookies\n            const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n            const userRole = cookieStore.get(\"userRole\")?.value;\n            const userId = cookieStore.get(\"userId\")?.value;\n            // Generate unique file path\n            const timestamp = Date.now();\n            const sanitizedName = file.name.replace(/[^a-zA-Z0-9.-]/g, \"_\");\n            const storagePath = `${projectId}/${timestamp}_${sanitizedName}`;\n            // Upload file to Supabase Storage\n            const fileBuffer = await file.arrayBuffer();\n            console.log(\"Uploading file to storage path:\", storagePath);\n            console.log(\"File size:\", file.size, \"bytes\");\n            console.log(\"File type:\", file.type);\n            const { data: uploadData, error: uploadError } = await supabase.storage.from(\"project-files\").upload(storagePath, fileBuffer, {\n                contentType: file.type,\n                upsert: false\n            });\n            if (uploadError) {\n                console.error(\"Error uploading file to storage:\", uploadError);\n                console.error(\"Storage path attempted:\", storagePath);\n                console.error(\"Full error object:\", JSON.stringify(uploadError, null, 2));\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to upload file\",\n                    details: uploadError.message\n                }, {\n                    status: 500\n                });\n            }\n            // Check if upload actually succeeded\n            if (!uploadData || !uploadData.path) {\n                console.error(\"Upload returned no data, likely failed silently\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Upload failed - no data returned\"\n                }, {\n                    status: 500\n                });\n            }\n            console.log(\"File uploaded successfully:\", JSON.stringify(uploadData, null, 2));\n            // Verify the file actually exists in storage\n            const { data: existsData, error: existsError } = await supabase.storage.from(\"project-files\").list(projectId, {\n                limit: 1,\n                search: sanitizedName\n            });\n            console.log(\"File exists check:\", existsData ? \"Files found: \" + existsData.length : \"No files found\");\n            if (existsError) {\n                console.error(\"Error checking if file exists:\", existsError);\n            }\n            // Get public URL for the file\n            const { data: { publicUrl } } = supabase.storage.from(\"project-files\").getPublicUrl(storagePath);\n            console.log(\"Generated public URL:\", publicUrl);\n            console.log(\"Storage path:\", storagePath);\n            // Create database record\n            const { data: fileRecord, error: dbError } = await supabase.from(\"aloa_project_files\").insert([\n                {\n                    project_id: projectId,\n                    file_name: file.name,\n                    file_size: file.size,\n                    file_type: file.type,\n                    storage_path: storagePath,\n                    category: category,\n                    is_public: false,\n                    requires_auth: true,\n                    uploaded_by: userRole || \"admin\",\n                    uploaded_by_id: userId,\n                    description: description,\n                    tags: tags,\n                    metadata: {},\n                    url: publicUrl,\n                    download_count: 0,\n                    is_visible: true,\n                    is_latest: true,\n                    is_folder: false,\n                    parent_folder_id: parentFolderId || null\n                }\n            ]).select().single();\n            if (dbError) {\n                console.error(\"Error creating file record:\", dbError);\n                // Clean up uploaded file\n                await supabase.storage.from(\"project-files\").remove([\n                    storagePath\n                ]);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to create file record\"\n                }, {\n                    status: 500\n                });\n            }\n            // Log activity to timeline\n            await supabase.from(\"aloa_project_timeline\").insert({\n                project_id: projectId,\n                event_type: \"file_upload\",\n                description: `File \"${file.name}\" uploaded by ${userRole || \"user\"}`,\n                user_id: userId,\n                metadata: {\n                    file_id: fileRecord.id,\n                    file_name: file.name,\n                    file_size: file.size,\n                    category: category\n                }\n            });\n            // Send notification to admins if uploaded by client\n            if (userRole === \"client\") {\n                await supabase.from(\"aloa_applet_interactions\").insert({\n                    project_id: projectId,\n                    interaction_type: \"file_upload\",\n                    user_identifier: userId || \"anonymous\",\n                    data: {\n                        file_name: file.name,\n                        file_size: file.size,\n                        category: category,\n                        file_id: fileRecord.id\n                    },\n                    created_at: new Date().toISOString(),\n                    read: false\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                file: fileRecord,\n                url: publicUrl,\n                id: fileRecord.id\n            });\n        }\n        // Handle JSON body (for backwards compatibility)\n        const body = await request.json();\n        // Get user from cookies\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n        const userRole = cookieStore.get(\"userRole\")?.value;\n        const userId = cookieStore.get(\"userId\")?.value;\n        const { data: file, error } = await supabase.from(\"aloa_project_files\").insert([\n            {\n                project_id: body.project_id,\n                projectlet_id: body.projectlet_id,\n                applet_id: body.applet_id,\n                file_name: body.file_name,\n                file_size: body.file_size,\n                file_type: body.file_type,\n                storage_path: body.storage_path,\n                category: body.category || \"general\",\n                is_public: body.is_public || false,\n                requires_auth: body.requires_auth !== false,\n                uploaded_by: body.uploaded_by || userRole || \"admin\",\n                uploaded_by_id: userId,\n                description: body.description,\n                tags: body.tags || [],\n                metadata: body.metadata || {},\n                url: body.url,\n                download_count: 0,\n                is_visible: true,\n                is_latest: true\n            }\n        ]).select().single();\n        if (error) {\n            console.error(\"Error creating project file record:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to create file record\"\n            }, {\n                status: 500\n            });\n        }\n        // Log activity to timeline\n        await supabase.from(\"aloa_project_timeline\").insert({\n            project_id: body.project_id,\n            event_type: \"file_upload\",\n            description: `File \"${body.file_name}\" uploaded by ${body.uploaded_by || userRole || \"user\"}`,\n            user_id: userId,\n            metadata: {\n                file_id: file.id,\n                file_name: body.file_name,\n                file_size: body.file_size,\n                category: body.category\n            }\n        });\n        // Send notification to admins if uploaded by client\n        if (body.uploaded_by === \"client\" || userRole === \"client\") {\n            await supabase.from(\"aloa_applet_interactions\").insert({\n                project_id: body.project_id,\n                interaction_type: \"file_upload\",\n                user_identifier: userId || \"anonymous\",\n                data: {\n                    file_name: body.file_name,\n                    file_size: body.file_size,\n                    category: body.category,\n                    file_id: file.id\n                },\n                created_at: new Date().toISOString(),\n                read: false\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            file\n        });\n    } catch (error) {\n        console.error(\"Error in project files route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// GET - Get project files and folders\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const projectId = searchParams.get(\"project_id\");\n        const category = searchParams.get(\"category\");\n        const parentFolderId = searchParams.get(\"parent_folder_id\");\n        let query = supabase.from(\"aloa_project_files\").select(\"*\").eq(\"is_visible\", true).order(\"uploaded_at\", {\n            ascending: false\n        });\n        if (projectId) {\n            query = query.eq(\"project_id\", projectId);\n        }\n        if (category && category !== \"all\") {\n            query = query.eq(\"category\", category);\n        }\n        // Filter by parent folder\n        if (parentFolderId) {\n            query = query.eq(\"parent_folder_id\", parentFolderId);\n        } else {\n            // If no parent_folder_id provided, get root level items\n            query = query.is(\"parent_folder_id\", null);\n        }\n        // Order folders first, then files\n        const { data: files, error } = await query.order(\"is_folder\", {\n            ascending: false\n        }).order(\"file_name\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Error fetching project files:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch files\"\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(files || []);\n    } catch (error) {\n        console.error(\"Error in project files route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE - Delete project file\nasync function DELETE(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const fileId = searchParams.get(\"id\");\n        const storagePath = searchParams.get(\"storage_path\");\n        if (!fileId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File ID required\"\n            }, {\n                status: 400\n            });\n        }\n        // Get file details first\n        const { data: fileData } = await supabase.from(\"aloa_project_files\").select(\"*\").eq(\"id\", fileId).single();\n        // Delete from storage if path provided\n        const pathToDelete = storagePath || fileData?.storage_path;\n        if (pathToDelete) {\n            try {\n                const { error: storageError } = await supabase.storage.from(\"project-files\").remove([\n                    pathToDelete\n                ]);\n                if (storageError) {\n                    console.error(\"Storage deletion error:\", storageError);\n                // Continue anyway - maybe file is already gone\n                }\n            } catch (err) {\n                console.error(\"Storage deletion failed:\", err);\n            }\n        }\n        // Delete from database\n        const { error } = await supabase.from(\"aloa_project_files\").delete().eq(\"id\", fileId);\n        if (error) {\n            console.error(\"Error deleting project file:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to delete file\"\n            }, {\n                status: 500\n            });\n        }\n        // Log deletion activity\n        if (fileData) {\n            const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n            const userId = cookieStore.get(\"userId\")?.value;\n            await supabase.from(\"aloa_project_timeline\").insert({\n                project_id: fileData.project_id,\n                event_type: \"file_delete\",\n                description: `File \"${fileData.file_name}\" deleted`,\n                user_id: userId,\n                metadata: {\n                    file_id: fileData.id,\n                    file_name: fileData.file_name\n                }\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true\n        });\n    } catch (error) {\n        console.error(\"Error in project files route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PATCH - Update file access count or other properties\nasync function PATCH(request) {\n    try {\n        const body = await request.json();\n        const { id, action, ...updates } = body;\n        if (!id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File ID required\"\n            }, {\n                status: 400\n            });\n        }\n        let updateData = {\n            last_accessed: new Date().toISOString(),\n            ...updates\n        };\n        // Handle download tracking\n        if (action === \"download\" || body.increment_download) {\n            // Increment download count\n            const { data: currentFile } = await supabase.from(\"aloa_project_files\").select(\"download_count\").eq(\"id\", id).single();\n            updateData.download_count = (currentFile?.download_count || 0) + 1;\n            updateData.last_downloaded_at = new Date().toISOString();\n        }\n        const { data: file, error } = await supabase.from(\"aloa_project_files\").update(updateData).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Error updating project file:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to update file\"\n            }, {\n                status: 500\n            });\n        }\n        // Log download activity if applicable\n        if (action === \"download\" || body.increment_download) {\n            const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n            const userId = cookieStore.get(\"userId\")?.value;\n            await supabase.from(\"aloa_project_timeline\").insert({\n                project_id: file.project_id,\n                event_type: \"file_download\",\n                description: `File \"${file.file_name}\" downloaded`,\n                user_id: userId,\n                metadata: {\n                    file_id: file.id,\n                    file_name: file.file_name\n                }\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            file\n        });\n    } catch (error) {\n        console.error(\"Error in project files route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/project-files/route.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fproject-files%2Froute&page=%2Fapi%2Fproject-files%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproject-files%2Froute.js&appDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frosspalmer%2FRoss%20GitHub%20Projects%2Faloa-web-design-project-manager&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();