"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_pdfGenerator_js";
exports.ids = ["_ssr_lib_pdfGenerator_js"];
exports.modules = {

/***/ "(ssr)/./lib/pdfGenerator.js":
/*!*****************************!*\
  !*** ./lib/pdfGenerator.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAnalysisPDF: () => (/* binding */ generateAnalysisPDF),\n/* harmony export */   parseAnalysisText: () => (/* binding */ parseAnalysisText)\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"(ssr)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n\nfunction generateAnalysisPDF(analysisData, formTitle) {\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 20;\n    const lineHeight = 7;\n    let yPosition = margin;\n    // Helper function to add text with word wrap\n    const addWrappedText = (text, fontSize = 12, fontStyle = \"normal\", maxWidth = pageWidth - 2 * margin)=>{\n        doc.setFontSize(fontSize);\n        doc.setFont(undefined, fontStyle);\n        const lines = doc.splitTextToSize(text, maxWidth);\n        lines.forEach((line)=>{\n            // Check if we need a new page\n            if (yPosition + lineHeight > pageHeight - margin) {\n                doc.addPage();\n                yPosition = margin;\n            }\n            doc.text(line, margin, yPosition);\n            yPosition += lineHeight;\n        });\n        return yPosition;\n    };\n    // Add spacing\n    const addSpacing = (space = 10)=>{\n        yPosition += space;\n        if (yPosition > pageHeight - margin) {\n            doc.addPage();\n            yPosition = margin;\n        }\n    };\n    // Header with branding\n    doc.setFillColor(0, 0, 0); // Black header\n    doc.rect(0, 0, pageWidth, 30, \"F\");\n    doc.setTextColor(255, 248, 232); // Cream text\n    doc.setFontSize(20);\n    doc.setFont(undefined, \"bold\");\n    doc.text(\"AI Analysis Report\", pageWidth / 2, 18, {\n        align: \"center\"\n    });\n    // Reset text color\n    doc.setTextColor(0, 0, 0);\n    yPosition = 45;\n    // Form title\n    doc.setFontSize(16);\n    doc.setFont(undefined, \"bold\");\n    doc.text(formTitle, margin, yPosition);\n    yPosition += 10;\n    // Date\n    doc.setFontSize(10);\n    doc.setFont(undefined, \"normal\");\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Generated: ${new Date().toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    })}`, margin, yPosition);\n    doc.setTextColor(0, 0, 0);\n    addSpacing(15);\n    // Parse the analysis data\n    if (analysisData.summary) {\n        // Executive Summary\n        doc.setFontSize(14);\n        doc.setFont(undefined, \"bold\");\n        doc.text(\"Executive Summary\", margin, yPosition);\n        yPosition += 8;\n        doc.setFontSize(11);\n        doc.setFont(undefined, \"normal\");\n        yPosition = addWrappedText(analysisData.summary, 11);\n        addSpacing(15);\n    }\n    // Key Insights\n    if (analysisData.insights && analysisData.insights.length > 0) {\n        doc.setFontSize(14);\n        doc.setFont(undefined, \"bold\");\n        doc.text(\"Key Insights\", margin, yPosition);\n        yPosition += 8;\n        analysisData.insights.forEach((insight, index)=>{\n            doc.setFontSize(11);\n            doc.setFont(undefined, \"normal\");\n            // Add bullet point\n            doc.text(\"•\", margin + 5, yPosition);\n            // Add insight text with indent\n            const oldMargin = margin;\n            doc.text(\"\", margin + 12, yPosition);\n            yPosition = addWrappedText(insight, 11, \"normal\", pageWidth - margin - 12 - 20);\n            addSpacing(5);\n        });\n        addSpacing(10);\n    }\n    // Trends and Patterns\n    if (analysisData.trends && analysisData.trends.length > 0) {\n        doc.setFontSize(14);\n        doc.setFont(undefined, \"bold\");\n        doc.text(\"Trends & Patterns\", margin, yPosition);\n        yPosition += 8;\n        analysisData.trends.forEach((trend)=>{\n            doc.setFontSize(11);\n            doc.setFont(undefined, \"normal\");\n            doc.text(\"•\", margin + 5, yPosition);\n            yPosition = addWrappedText(trend, 11, \"normal\", pageWidth - margin - 12 - 20);\n            addSpacing(5);\n        });\n        addSpacing(10);\n    }\n    // Recommendations\n    if (analysisData.recommendations && analysisData.recommendations.length > 0) {\n        doc.setFontSize(14);\n        doc.setFont(undefined, \"bold\");\n        doc.text(\"Recommendations\", margin, yPosition);\n        yPosition += 8;\n        analysisData.recommendations.forEach((rec, index)=>{\n            doc.setFontSize(11);\n            doc.setFont(undefined, \"bold\");\n            doc.text(`${index + 1}.`, margin + 5, yPosition);\n            yPosition = addWrappedText(rec, 11, \"normal\", pageWidth - margin - 15 - 20);\n            addSpacing(5);\n        });\n        addSpacing(10);\n    }\n    // Response Statistics\n    if (analysisData.statistics) {\n        doc.setFontSize(14);\n        doc.setFont(undefined, \"bold\");\n        doc.text(\"Response Statistics\", margin, yPosition);\n        yPosition += 8;\n        doc.setFontSize(11);\n        doc.setFont(undefined, \"normal\");\n        if (analysisData.statistics.totalResponses !== undefined) {\n            doc.text(`Total Responses: ${analysisData.statistics.totalResponses}`, margin + 5, yPosition);\n            yPosition += 7;\n        }\n        if (analysisData.statistics.completionRate !== undefined) {\n            doc.text(`Completion Rate: ${analysisData.statistics.completionRate}%`, margin + 5, yPosition);\n            yPosition += 7;\n        }\n        if (analysisData.statistics.averageTime !== undefined) {\n            doc.text(`Average Completion Time: ${analysisData.statistics.averageTime}`, margin + 5, yPosition);\n            yPosition += 7;\n        }\n        addSpacing(10);\n    }\n    // Footer\n    const footerY = pageHeight - 15;\n    doc.setFontSize(8);\n    doc.setTextColor(150, 150, 150);\n    doc.text(\"Generated by Aloa\\xae Custom Forms\", pageWidth / 2, footerY, {\n        align: \"center\"\n    });\n    doc.text(`Page ${doc.internal.getCurrentPageInfo().pageNumber}`, pageWidth - margin, footerY, {\n        align: \"right\"\n    });\n    return doc;\n}\n// Parse AI analysis text into structured data\nfunction parseAnalysisText(analysisText) {\n    const data = {\n        summary: \"\",\n        insights: [],\n        trends: [],\n        recommendations: [],\n        statistics: {}\n    };\n    if (!analysisText) return data;\n    // Split by sections\n    const sections = analysisText.split(/##\\s+/);\n    sections.forEach((section)=>{\n        const lines = section.trim().split(\"\\n\");\n        const sectionTitle = lines[0].toLowerCase();\n        const content = lines.slice(1).join(\"\\n\").trim();\n        if (sectionTitle.includes(\"summary\") || sectionTitle.includes(\"overview\")) {\n            data.summary = content.replace(/^[-•*]\\s*/gm, \"\").trim();\n        } else if (sectionTitle.includes(\"insight\") || sectionTitle.includes(\"finding\")) {\n            const insights = content.split(/^[-•*]\\s+/m).filter(Boolean);\n            data.insights = insights.map((i)=>i.trim());\n        } else if (sectionTitle.includes(\"trend\") || sectionTitle.includes(\"pattern\")) {\n            const trends = content.split(/^[-•*]\\s+/m).filter(Boolean);\n            data.trends = trends.map((t)=>t.trim());\n        } else if (sectionTitle.includes(\"recommend\") || sectionTitle.includes(\"suggestion\")) {\n            const recs = content.split(/^[\\d.]+\\s+/m).filter(Boolean);\n            data.recommendations = recs.map((r)=>r.trim());\n        } else if (sectionTitle.includes(\"statistic\") || sectionTitle.includes(\"metric\")) {\n            // Parse statistics from content\n            const statLines = content.split(\"\\n\");\n            statLines.forEach((line)=>{\n                if (line.includes(\"Total\") && line.includes(\"Response\")) {\n                    const match = line.match(/\\d+/);\n                    if (match) data.statistics.totalResponses = parseInt(match[0]);\n                }\n                if (line.includes(\"Completion\") && line.includes(\"Rate\")) {\n                    const match = line.match(/(\\d+(?:\\.\\d+)?)\\s*%/);\n                    if (match) data.statistics.completionRate = parseFloat(match[1]);\n                }\n                if (line.includes(\"Average\") && line.includes(\"Time\")) {\n                    const match = line.match(/(\\d+(?:\\.\\d+)?)\\s*(minute|second|hour)/i);\n                    if (match) data.statistics.averageTime = `${match[1]} ${match[2]}s`;\n                }\n            });\n        }\n    });\n    // If no structured data found, treat entire text as summary\n    if (!data.summary && data.insights.length === 0 && data.trends.length === 0) {\n        data.summary = analysisText;\n    }\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/pdfGenerator.js\n");

/***/ })

};
;